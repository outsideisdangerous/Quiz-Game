{"version":3,"sources":["Components/QuizArea.jsx","Utils/questions.utils.js","Components/StartScreen.jsx","Components/ScoreBoard.jsx","App.jsx","index.js"],"names":["QuizArea","handleOptionClickedTrue","handleOptionClickedFalse","questionIndex","quizzes","cQuestion","correct_answer","html","txt","document","createElement","innerHTML","value","decodeHtml","question","className","onClick","fetchQuestions","numOfQuestions","difficulty","categoryId","a","params","URLSearchParams","append","axios","get","response","data","results","length","Error","difficultyLevels","StartScreen","startGame","setNumOfQuestions","gameStarted","setGameStarted","categories","setCategories","setCategoryId","setDifficulty","error","fetchCategories","useCallback","trivia_categories","console","log","useEffect","id","type","min","max","placeholder","onChange","event","target","alert","map","category","name","e","level","ScoreBoard","numCorrect","toFixed","App","useState","setQuizzes","gameFinished","setGameFinished","currentQuestionIndex","setCurrentQuestionIndex","setNumCorrect","setError","currentQuestion","questions","message","prevState","ReactDOM","render","getElementById"],"mappings":"8MA4CeA,MApCf,YAMI,IALFC,EAKC,EALDA,wBACAC,EAIC,EAJDA,yBACAC,EAGC,EAHDA,cACAC,EAEC,EAFDA,QAIMC,GAFL,EADDC,eAXF,SAAoBC,GAClB,IAAIC,EAAMC,SAASC,cAAc,YAEjC,OADAF,EAAIG,UAAYJ,EACTC,EAAII,MAWOC,CADMT,EAAQD,GACaW,WAE7C,OACE,0BAASC,UAAU,8CAAnB,UACE,sBAAKA,UAAU,cAAf,UACE,4CAAeZ,EAAgB,KAE/B,6BAAKE,OAGP,sBAAKU,UAAU,uBAAf,UACE,wBACEA,UAAU,6CACVC,QAASf,EAFX,kBAMA,wBACEc,UAAU,uCACVC,QAASd,EAFX,0B,gBC/BKe,EAAc,uCAAG,WAC5BC,EACAC,EACAC,GAH4B,mBAAAC,EAAA,6DAKtBC,EAAS,IAAIC,iBACZC,OAAO,SAAUN,GACL,QAAfC,GACFG,EAAOE,OAAO,aAAcL,IAEV,IAAhBC,GACFE,EAAOE,OAAO,aAAcJ,GAE9BE,EAAOE,OAAO,OAAQ,WACV,8BAdgB,SAeLC,IAAMC,IADjB,8BAC0B,CAAEJ,WAfZ,UAetBK,EAfsB,QAgBtBC,EAAOD,EAASC,KAAKC,SACjBC,OAjBkB,uBAkBpB,IAAIC,MAAM,0BAlBU,iCAoBrBH,GApBqB,4CAAH,0DCErBI,EAAmB,CAAC,OAAQ,SAAU,OAAQ,OAgHrCC,EA9GK,SAAC,GAWd,IAVLC,EAUI,EAVJA,UAGAC,GAOI,EATJC,YASI,EARJC,eAQI,EAPJF,mBAEAG,GAKI,EANJlC,QAMI,EALJkC,YACAC,EAII,EAJJA,cACAC,EAGI,EAHJA,cACAC,EAEI,EAFJA,cACAC,EACI,EADJA,MAkBMC,EAAkBC,sBAAW,sBAAC,4BAAAvB,EAAA,sEAEpB,uCAFoB,SAGTI,IAAMC,IADjB,wCAFoB,OAG1BC,EAH0B,OAIhCY,EAAcZ,EAASC,KAAKiB,mBAJI,gDAMhCC,QAAQC,IAAI,CAAEL,MAAK,OANa,yDAQjC,IAgBH,OAJAM,qBAAU,WACRL,MACC,IAGD,yBAAS5B,UAAU,GAAnB,SACE,sBAAKA,UAAU,2CAAf,UACE,qBAAKA,UAAU,SAAf,SACE,oBAAIA,UAAU,2FAAd,yBAIF,gCACE,oBAAIA,UAAU,uBAAd,uCACA,uBACEkC,GAAG,kBACHC,KAAK,SACLC,IAAK,EACLC,IAAK,GACLC,YAAY,sBACZC,SApD6B,SAACC,GAClCA,EAAMC,OAAO5C,MAAQ,GACvB6C,MAAM,+CAENtB,EAAkBoB,EAAMC,OAAO5C,aAmD7B,gCACE,oBAAIG,UAAU,uBAAd,sBACA,wBAAQuC,SAjDa,SAACC,GAC5Bf,EAAce,EAAMC,OAAO5C,QAgDrB,SACG0B,EAAWoB,KAAI,SAACC,GACf,OACE,wBAA0B/C,MAAO+C,EAASV,GAA1C,SACGU,EAASC,MADCD,EAASV,YAO9B,gCACE,oBAAIlC,UAAU,uBAAd,wBACA,wBAAQuC,SAzEoB,SAACO,GACnCpB,EAAcoB,EAAEL,OAAO5C,QAwEjB,SACGoB,EAAiB0B,KAAI,SAACI,GACrB,OACE,wBAAoBlD,MAAOkD,EAA3B,SACGA,GADUA,WAOpBpB,GAAS,8BAAMA,IAChB,gCACE,uBACA,wBACE3B,UAAU,+GACVC,QAASkB,EAFX,iCCvFK6B,MAff,YAAqD,IAA/B7C,EAA8B,EAA9BA,eAAgB8C,EAAc,EAAdA,WACpC,OACE,sBAAKjD,UAAU,iDAAf,UACE,gDACA,+DAAkCiD,KAClC,iEAAoC9C,EAAiB8C,KACrD,wDACyB,KACpBA,EAAa9C,EAAkB,KAAK+C,QAAQ,GAFjD,OAIA,oBAAIlD,UAAU,GAAd,4BC2GSmD,G,MAhHH,WACV,MAA4CC,mBAAS,GAArD,mBAAOjD,EAAP,KAAuBiB,EAAvB,KACA,EAA8BgC,mBAAS,IAAvC,mBAAO/D,EAAP,KAAgBgE,EAAhB,KACA,EAAoCD,mBAAS,IAA7C,mBAAO7B,EAAP,KAAmBC,EAAnB,KACA,EAAoC4B,oBAAU,GAA9C,mBAAO/C,EAAP,KAAmBoB,EAAnB,KACA,EAAoC2B,mBAAS,OAA7C,mBAAOhD,EAAP,KAAmBsB,EAAnB,KAEA,EAAsC0B,oBAAS,GAA/C,mBAAO/B,EAAP,KAAoBC,EAApB,KACA,EAAwC8B,oBAAS,GAAjD,mBAAOE,EAAP,KAAqBC,EAArB,KACA,EAAwDH,mBAAS,GAAjE,mBAAOI,EAAP,KAA6BC,EAA7B,KAEA,EAAoCL,mBAAS,GAA7C,mBAAOH,EAAP,KAAmBS,EAAnB,KACA,EAA0BN,mBAAS,MAAnC,mBAAOzB,EAAP,KAAcgC,EAAd,KAEMC,EAAkBvE,EAAQmE,GAE1BrC,EAAS,uCAAG,4BAAAb,EAAA,sEAEdqD,EAAS,MAFK,SAGUzD,EACtBC,EACAC,EACAC,GANY,OAGRwD,EAHQ,OAQdR,EAAWQ,GACXvC,GAAe,GATD,gDAWdqC,EAAS,KAAIG,SAXC,yDAAH,qDAqDf,OACE,iCACmB,IAAhBzC,GACC,cAAC,EAAD,CACEF,UAAWA,EACXhB,eAAgBA,EAChBiB,kBAAmBA,EACnB/B,QAASA,EACTgE,WAAYA,EACZ9B,WAAYA,EACZC,cAAeA,EACfnB,WAAYA,EACZoB,cAAeA,EACfrB,WAAYA,EACZsB,cAAeA,EACfC,MAAOA,KAGM,IAAhBN,IAAyC,IAAjBiC,IAA2B3B,GAClD,cAAC,EAAD,CACEvC,cAAeoE,EACfrC,UAAWA,EACXhB,eAAgBA,EAChBiB,kBAAmBA,EACnB/B,QAASA,EACTgE,WAAYA,EACZ9B,WAAYA,EACZC,cAAeA,EACfnB,WAAYA,EACZoB,cAAeA,EACfrB,WAAYA,EACZsB,cAAeA,EACfxC,wBAtEwB,WACS,SAAnC0E,EAAgBrE,gBAClBmE,GAAc,SAACK,GACb,OAAOA,EAAY,KAErBN,GAAwB,SAACM,GACvB,OAAOA,EAAY,MAGrBN,GAAwB,SAACM,GACvB,OAAOA,EAAY,KAInBP,IAAyBrD,EAAiB,GAC5CoD,GAAgB,IAwDZpE,yBApDyB,WACQ,UAAnCyE,EAAgBrE,gBAClBmE,GAAc,SAACK,GACb,OAAOA,EAAY,KAErBN,GAAwB,SAACM,GACvB,OAAOA,EAAY,MAGrBN,GAAwB,SAACM,GACvB,OAAOA,EAAY,KAInBP,IAAyBrD,EAAiB,GAC5CoD,GAAgB,OAwCE,IAAjBD,GACC,cAAC,EAAD,CAAYL,WAAYA,EAAY9C,eAAgBA,SC3G5D6D,IAASC,OAAO,cAAC,EAAD,IAASvE,SAASwE,eAAe,gB","file":"static/js/main.5e215179.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction decodeHtml(html) {\r\n  var txt = document.createElement(\"textarea\");\r\n  txt.innerHTML = html;\r\n  return txt.value;\r\n}\r\n\r\nfunction QuizArea({\r\n  handleOptionClickedTrue,\r\n  handleOptionClickedFalse,\r\n  questionIndex,\r\n  quizzes,\r\n  correct_answer,\r\n}) {\r\n  const currentQuestion = quizzes[questionIndex];\r\n  const cQuestion = decodeHtml(currentQuestion.question);\r\n\r\n  return (\r\n    <section className=\"bg-four rounded-xl h-32  w-screen shadow-xl\">\r\n      <div className=\"text-center\">\r\n        <h1>Question #{questionIndex + 1}</h1>\r\n\r\n        <h1>{cQuestion}</h1>\r\n      </div>\r\n\r\n      <div className=\"wrapper-button my-6 \">\r\n        <button\r\n          className=\"border rounded mr-12 bg-five hover:bg-four\"\r\n          onClick={handleOptionClickedTrue}\r\n        >\r\n          True\r\n        </button>\r\n        <button\r\n          className=\"border bg-five rounded hover:bg-four\"\r\n          onClick={handleOptionClickedFalse}\r\n        >\r\n          False\r\n        </button>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default QuizArea;\r\n","import axios from \"axios\";\r\n\r\nexport const fetchQuestions = async (\r\n  numOfQuestions,\r\n  difficulty,\r\n  categoryId\r\n) => {\r\n  const params = new URLSearchParams();\r\n  params.append(\"amount\", numOfQuestions);\r\n  if (difficulty !== \"all\") {\r\n    params.append(\"difficulty\", difficulty);\r\n  }\r\n  if (categoryId !== -1) {\r\n    params.append(\"categoryId\", categoryId);\r\n  }\r\n  params.append(\"type\", \"boolean\");\r\n  const url = \"https://opentdb.com/api.php\";\r\n  const response = await axios.get(url, { params });\r\n  const data = response.data.results;\r\n  if (!data.length) {\r\n    throw new Error(\"No question available.\");\r\n  }\r\n  return data;\r\n};\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { fetchQuestions } from \"../Utils/questions.utils\";\r\n\r\nconst difficultyLevels = [\"easy\", \"medium\", \"hard\", \"all\"];\r\n\r\nconst StartScreen = ({\r\n  startGame,\r\n  gameStarted,\r\n  setGameStarted,\r\n  setNumOfQuestions,\r\n  quizzes,\r\n  categories,\r\n  setCategories,\r\n  setCategoryId,\r\n  setDifficulty,\r\n  error,\r\n}) => {\r\n  const handleDifficultyLevelChange = (e) => {\r\n    setDifficulty(e.target.value);\r\n  };\r\n\r\n  const handleNumOfQuestionInputChange = (event) => {\r\n    if (event.target.value > 50) {\r\n      alert(\"Please enter a maximum value of 50 or less!\");\r\n    } else {\r\n      setNumOfQuestions(event.target.value);\r\n    }\r\n  };\r\n\r\n  const handleCategoryChange = (event) => {\r\n    setCategoryId(event.target.value);\r\n  };\r\n\r\n  const fetchCategories = useCallback(async () => {\r\n    try {\r\n      const url = \"https://opentdb.com/api_category.php\";\r\n      const response = await axios.get(url);\r\n      setCategories(response.data.trivia_categories);\r\n    } catch (error) {\r\n      console.log({ error });\r\n    }\r\n  }, []);\r\n\r\n  const fetchDifficulties = async () => {\r\n    try {\r\n      const url = \"https://opentdb.com/api.php\";\r\n      const response = await axios.get(url);\r\n      setDifficulty(response.data.trivia_difficulty);\r\n    } catch (error) {\r\n      console.log({ error });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCategories();\r\n  }, []);\r\n\r\n  return (\r\n    <section className=\"\">\r\n      <div className=\"wrapper bg-four rounded-lg shadow-xl p-6\">\r\n        <div className=\"title \">\r\n          <h1 className=\"text-4xl text-primary rounded bg-three shadow-md text-center font-semibold tracking-wide\">\r\n            QUIZ GAME\r\n          </h1>\r\n        </div>\r\n        <div>\r\n          <h2 className=\"my-1.5 font-semibold\">Enter number of questions</h2>\r\n          <input\r\n            id=\"set-quiz-length\"\r\n            type=\"number\"\r\n            min={1}\r\n            max={50}\r\n            placeholder=\"Number of Questions\"\r\n            onChange={handleNumOfQuestionInputChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <h2 className=\"my-1.5 font-semibold\">Category</h2>\r\n          <select onChange={handleCategoryChange}>\r\n            {categories.map((category) => {\r\n              return (\r\n                <option key={category.id} value={category.id}>\r\n                  {category.name}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <h2 className=\"my-1.5 font-semibold\">Difficulty</h2>\r\n          <select onChange={handleDifficultyLevelChange}>\r\n            {difficultyLevels.map((level) => {\r\n              return (\r\n                <option key={level} value={level}>\r\n                  {level}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </div>\r\n        {error && <div>{error}</div>}\r\n        <div>\r\n          <br />\r\n          <button\r\n            className=\"z-50 hover:bg-transparent text-gray-700 font-bold py-2 px-4 border-b-4 border-five hover:border-blue rounded\"\r\n            onClick={startGame}\r\n          >\r\n            Start Quiz\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default StartScreen;\r\n","import React from \"react\";\r\n\r\nfunction ScoreBoard({ numOfQuestions, numCorrect }) {\r\n  return (\r\n    <div className=\"wrapper bg-four rounded-lg shadow-xl space-y-6\">\r\n      <h1>Your Results: </h1>\r\n      <h2>Number of Questions Correct: {numCorrect}</h2>\r\n      <h2>Number of Questions Incorrect: {numOfQuestions - numCorrect}</h2>\r\n      <h2>\r\n        Your Score percentage:{\" \"}\r\n        {((numCorrect / numOfQuestions) * 100).toFixed(2)}%\r\n      </h2>\r\n      <h1 className=\"\">Well Done!</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScoreBoard;\r\n","import React, { useState } from \"react\";\r\nimport QuizArea from \"./Components/QuizArea\";\r\nimport StartScreen from \"./Components/StartScreen\";\r\nimport { fetchQuestions } from \"./Utils/questions.utils\";\r\nimport ScoreBoard from \"./Components/ScoreBoard\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  const [numOfQuestions, setNumOfQuestions] = useState(0);\r\n  const [quizzes, setQuizzes] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [categoryId, setCategoryId] = useState(-1);\r\n  const [difficulty, setDifficulty] = useState(\"all\");\r\n\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [gameFinished, setGameFinished] = useState(false);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n\r\n  const [numCorrect, setNumCorrect] = useState(0);\r\n  const [error, setError] = useState(null);\r\n\r\n  const currentQuestion = quizzes[currentQuestionIndex];\r\n\r\n  const startGame = async () => {\r\n    try {\r\n      setError(null);\r\n      const questions = await fetchQuestions(\r\n        numOfQuestions,\r\n        difficulty,\r\n        categoryId\r\n      );\r\n      setQuizzes(questions);\r\n      setGameStarted(true);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  const handleOptionClickedTrue = () => {\r\n    if (currentQuestion.correct_answer === \"True\") {\r\n      setNumCorrect((prevState) => {\r\n        return prevState + 1;\r\n      });\r\n      setCurrentQuestionIndex((prevState) => {\r\n        return prevState + 1;\r\n      });\r\n    } else {\r\n      setCurrentQuestionIndex((prevState) => {\r\n        return prevState + 1;\r\n      });\r\n    }\r\n\r\n    if (currentQuestionIndex === numOfQuestions - 1) {\r\n      setGameFinished(true);\r\n    }\r\n  };\r\n\r\n  const handleOptionClickedFalse = () => {\r\n    if (currentQuestion.correct_answer === \"False\") {\r\n      setNumCorrect((prevState) => {\r\n        return prevState + 1;\r\n      });\r\n      setCurrentQuestionIndex((prevState) => {\r\n        return prevState + 1;\r\n      });\r\n    } else {\r\n      setCurrentQuestionIndex((prevState) => {\r\n        return prevState + 1;\r\n      });\r\n    }\r\n\r\n    if (currentQuestionIndex === numOfQuestions - 1) {\r\n      setGameFinished(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {gameStarted === false && (\r\n        <StartScreen\r\n          startGame={startGame}\r\n          numOfQuestions={numOfQuestions}\r\n          setNumOfQuestions={setNumOfQuestions}\r\n          quizzes={quizzes}\r\n          setQuizzes={setQuizzes}\r\n          categories={categories}\r\n          setCategories={setCategories}\r\n          categoryId={categoryId}\r\n          setCategoryId={setCategoryId}\r\n          difficulty={difficulty}\r\n          setDifficulty={setDifficulty}\r\n          error={error}\r\n        />\r\n      )}\r\n      {gameStarted === true && gameFinished === false && !error && (\r\n        <QuizArea\r\n          questionIndex={currentQuestionIndex}\r\n          startGame={startGame}\r\n          numOfQuestions={numOfQuestions}\r\n          setNumOfQuestions={setNumOfQuestions}\r\n          quizzes={quizzes}\r\n          setQuizzes={setQuizzes}\r\n          categories={categories}\r\n          setCategories={setCategories}\r\n          categoryId={categoryId}\r\n          setCategoryId={setCategoryId}\r\n          difficulty={difficulty}\r\n          setDifficulty={setDifficulty}\r\n          handleOptionClickedTrue={handleOptionClickedTrue}\r\n          handleOptionClickedFalse={handleOptionClickedFalse}\r\n        />\r\n      )}\r\n      {gameFinished === true && (\r\n        <ScoreBoard numCorrect={numCorrect} numOfQuestions={numOfQuestions} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"tailwindcss/tailwind.css\";\r\nimport App from \"./App\";\r\nimport \"./App.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"quiz-root\"));\r\n"],"sourceRoot":""}